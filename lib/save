@override
  Widget build(BuildContext context) {
    
        
 

  /*final docRef = db.collection('users').doc(widget.uid).collection('goal').doc('goal');
  docRef.get().then(
  (DocumentSnapshot doc) {
    final data = doc.data() as String;
  },
  onError: (e) => print("Error getting document: $e"),
);  */



/* Future getNameAddress() async {
try {
  final doc = await db.collection('users').doc(widget.uid).collection('goal').doc('goal').get();
  
  if (doc.exists) {
    final data = doc.data() as String;
    
    // Now you can use the data variable
    String goal = data;
    
     Align(
              alignment: Alignment(-0.0, -0.8),
              child:Text(
                  goal,
                  textAlign: TextAlign.center,
                  overflow: TextOverflow.clip,
                  style:  TextStyle(
                    fontWeight: FontWeight.w400,
                    fontStyle: FontStyle.normal,
                    fontSize: 34,
                    color: Color(0xffffffff),
                  ),
                ),
     );
  } else {
    print('Document does not exist');
  }
} catch (e) {
  print("Error getting document: $e");
}
}  */ 


    return Scaffold(
      bottomNavigationBar: NavigationBar(
        onDestinationSelected: (int index) {
          setState(() {
            currentPageIndex = index;
          });
        },
        indicatorColor: Colors.amber[800],
        selectedIndex: currentPageIndex,
        destinations: const <Widget>[
          NavigationDestination(
            selectedIcon: Icon(Icons.home),
            icon: Icon(Icons.home_outlined),
            label: 'Home',
          ),
          NavigationDestination(
            selectedIcon: Icon(Icons.add_circle),
            icon: Icon(Icons.add_circle_outline),
            label: 'Income',
          ),
          NavigationDestination(
            selectedIcon: Icon(Icons.remove_circle),
            icon: Icon(Icons.remove_circle_outline),
            label: 'Expense',
          ),
          NavigationDestination(
            selectedIcon: Icon(Icons.monetization_on),
            icon: Icon(Icons.monetization_on_outlined), 
            label: 'Balance Stats'
          )
        ],
      )
    );
  }
      
      body: <Widget>[
        
        
        //index 1
        Container(
          color: const Color.fromARGB(255, 38, 105, 168),
          alignment: Alignment.center,
          child: Stack(
            alignment: Alignment.topLeft,
            children: [
           Align(
              alignment: const Alignment(-0.0, -0.5),
              // child: Container(
              //   margin: const EdgeInsets.all(0),
              //   padding: const EdgeInsets.all(0),
              //   width: 200,
              //   height: 100,
              //   decoration: BoxDecoration(
              //     color: Color.fromARGB(192, 0, 255, 255),
              //     shape: BoxShape.rectangle,
              //     borderRadius: BorderRadius.zero,
              //     border: Border.all(color: Color.fromARGB(192, 0, 255, 255), width: 1),
              //   ),
              child: SizedBox(
                height: 150,
                width: 150,           
                    child: CircularProgressIndicator(
                        backgroundColor: Color.fromARGB(255, 125, 125, 125),
                        value: 0.7,
                        valueColor: new AlwaysStoppedAnimation<Color>(const Color.fromARGB(255, 43, 164, 47)),
                        strokeWidth: 20,
                        ),

                  ),
                ),
              
            
            
              Align(
              alignment: Alignment(-0.0, -0.8),
              child:Text(
                  gatherdata(),
                  textAlign: TextAlign.center,
                  overflow: TextOverflow.clip,
                  style:  TextStyle(
                    fontWeight: FontWeight.w400,
                    fontStyle: FontStyle.normal,
                    fontSize: 34,
                    color: Color(0xffffffff),
                  ),
                ),
          ),
          
          const Align(
              alignment: Alignment(-0.5, -0.1),
              child: FittedBox(
              child: Text(
                  'expenses',
                  textAlign: TextAlign.center,
                  overflow: TextOverflow.clip,
                  style:  TextStyle(
                    fontWeight: FontWeight.w400,
                    fontStyle: FontStyle.normal,
                    fontSize: 34,
                    color: Color(0xffffffff),
                  ),
                ),
          ),
          ),
          
          Align(
            alignment: const Alignment(-0.5, 0.4),
            child: FittedBox(     
              child: RichText(
              text: const TextSpan(
                style: TextStyle(fontSize: 24.0, color: Colors.black, height: 1.5),
                children: [
                  TextSpan(text: 'Line 1\n'),
                  TextSpan(text: 'Line 2\n',),
                  TextSpan(text: 'Line 3\n'),
                  TextSpan(text: 'Line 4\n'),
                  TextSpan(text: 'Line 5',),
                  
                ],
              ),
            ),
              
            )
          ),
            
          
          Align(
            alignment: const Alignment(0.5, 0.4),
            child: FittedBox(     
              child: RichText(
              text: const TextSpan(
                style: TextStyle(fontSize: 24.0, color: Colors.black, height: 1.5),
                children: [
                  TextSpan(text: 'Line 1\n'),
                  TextSpan(text: 'Line 2\n',),
                  TextSpan(text: 'Line 3\n'),
                  TextSpan(text: 'Line 4\n'),
                  TextSpan(text: 'Line 5',),
                  
                ],
              ),
            ),
              
            )
          ),
          const Align(
              alignment: Alignment(0.5, -0.1),
              child: Text(
                  'income',
                  textAlign: TextAlign.center,
                  overflow: TextOverflow.clip,
                  style:  TextStyle(
                    fontWeight: FontWeight.w400,
                    fontStyle: FontStyle.normal,
                    fontSize: 34,
                    color: Color(0xffffffff),
                  ),
                ),
          )
            ]
          )
        ),
        
      
        
        //index 2
        Container(
          color: const Color.fromARGB(255, 38, 105, 168),
          alignment: Alignment.center,
          child:  Stack(
            alignment: Alignment.topLeft,
            children: [
            const Align(
              alignment: Alignment(-0.6, -0.5),
              child: SizedBox(
                width: 300,
                child: TextField(
                  decoration: InputDecoration(
                    filled: true,
                    fillColor: Colors.white,
                    border: OutlineInputBorder(),
                    hintStyle: TextStyle(fontSize: 16),
                      hintText: 'Enter an expense',
            ),
          ),
        ),
      ),
       
       
       const Align(
              alignment: Alignment(0.5, -0.5),
              child: FittedBox(
              child: Text(
                  'expenses',
                  textAlign: TextAlign.center,
                  overflow: TextOverflow.clip,
                  style:  TextStyle(
                    fontWeight: FontWeight.w400,
                    fontStyle: FontStyle.normal,
                    fontSize: 34,
                    color: Color(0xffffffff),
                  ),
                ),
          ),
          ),
        
        
          Align(
            alignment:  Alignment(0.5, 0.4),
          
            child: FittedBox(     
              child: RichText(
              text: const TextSpan(
                style: TextStyle(fontSize: 24.0, color: Colors.black, height: 1.5),
                children: [
                  TextSpan(text: 'Line 1\n'),
                  TextSpan(text: 'Line 2\n',),
                  TextSpan(text: 'Line 3\n'),
                  TextSpan(text: 'Line 4\n'),
                  TextSpan(text: 'Line 5',),
                  
                ],
              ),
            ),
              
            )
          ),
          

    ],
      ),
        ),
        
        
        
        //index 3
        Container(
          color: const Color.fromARGB(255, 38, 105, 168),
          alignment: Alignment.center,
          child: const Text("page 3")
        ),
        
        
        
        //index 4
        Container(
          color: const Color.fromARGB(255, 38, 105, 168),
          alignment: Alignment.center,
          child: const Text("page 4")
        ),
      ][currentPageIndex],
    );
  }




  body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            TextField(
              controller: _emailController,
              decoration: InputDecoration(labelText: 'Email'),
            ),
            SizedBox(height: 16.0),
            TextField(
              controller: _passwordController,
              obscureText: true,
              decoration: InputDecoration(labelText: 'Password'),
            ),
            SizedBox(height: 32.0),
            ElevatedButton(
              onPressed: _signIn,
              child: Text('Sign In'),
            ),
          ],
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            TextField(
              controller: _emailController,
              decoration: InputDecoration(labelText: 'Email'),
            ),
            SizedBox(height: 16.0),
            TextField(
              controller: _passwordController,
              obscureText: true,
              decoration: InputDecoration(labelText: 'Password'),
            ),
            SizedBox(height: 32.0),
            ElevatedButton(
              onPressed: _signIn,
              child: Text('Sign In'),
            ),
          ],
        ),
      ),
    );
  }
  